# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mDBGHGS_fxc_kxYBZpz6DkjvpB7EY0lW
"""

import numpy as np
import scipy as sc
import matplotlib.pyplot as plt
from sklearn.datasets import make_circles

#Creamos el DataSET
n = 500
p = 2

X,Y = make_circles(n_samples=n,factor=0.5,noise=0.05)

plt.scatter(X[Y == 0,0],X[Y == 0,1],c="skyblue")
plt.scatter(X[Y == 1,0],X[Y == 1,1],c="salmon")
plt.axis("equal")

plt.grid()
plt.show()

class neural_layer():
  def __init__(self,n_comn,n_neur,act_f):
    self.act_f = act_f
    self.b = np.random.rand(1,n_neur)*2 -1
    self.W = np.random.rand(n_comn,n_neur)*2 -1

#FUNCIONES DE ACTIVACION

sigm = (lambda x: 1/(1+np.e**(-x)),
        lambda x: x*(1-x))

def create_nn(topology,act_f):
  nn = []
  for l,layer in enumerate(topology[:-1]):
    nn.append(neural_layer(topology[l],topology[l+1],act_f))
  return nn

topology = [p,4,8,16,8,4,1]
neural_net = create_nn(topology,sigm)

l2_cost = (lambda Yp, Yr: np.mean(((Yp-Yr)**2)),
           lambda Yp, Yr: (Yp - Yr))


def train(neural_net,X,Y,l2_cost,lr=0.5,train = True):
  out = [(None,X)]
  for l,layer in enumerate(neural_net):
    z = out[-1][1]@neural_net[l].W +  neural_net[l].b
    a = neural_net[l].act_f[0](z)
    out.append((z,a))

  if train:
    deltas = []

    for l in reversed(range(len(neural_net))):
      




train(neural_net,X,Y,l2_cost,0.5)

